<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- WARNING: Eclipse auto-generated file.
              Any modifications will be overwritten.
              To include a user specific buildfile here, simply create one in the same
              directory with the processing instruction <?eclipse.ant.import?>
              as the first entry and export the buildfile again. --><project basedir="." default="build" name="upmc-pstl">
    <property environment="env"/>
    <property name="ECLIPSE_HOME" value="../../../../../Volumes/Eclipse/Eclipse.app/Contents/Eclipse/"/>
    <property name="junit.output.dir" value="junit"/>
    <property name="debuglevel" value="source,lines,vars"/>
    <property name="target" value="1.8"/>
    <property name="source" value="1.8"/>
    <path id="upmc-pstl.classpath">
        <pathelement location="bin"/>
        <pathelement location="lib/junit.jar"/>
        <pathelement location="lib/org.apiguardian_1.0.0.v20170910-2246.jar"/>
        <pathelement location="lib/org.hamcrest.core_1.3.0.v201303031735.jar"/>
        <pathelement location="lib/org.junit.jupiter.api_5.0.0.v20170910-2246.jar"/>
        <pathelement location="lib/org.junit.jupiter.engine_5.0.0.v20170910-2246.jar"/>
        <pathelement location="lib/org.junit.jupiter.migrationsupport_5.0.0.v20170910-2246.jar"/>
        <pathelement location="lib/org.junit.jupiter.params_5.0.0.v20170910-2246.jar"/>
        <pathelement location="lib/org.junit.platform.commons_1.0.0.v20170910-2246.jar"/>
        <pathelement location="lib/org.junit.platform.engine_1.0.0.v20170910-2246.jar"/>
        <pathelement location="lib/org.junit.platform.launcher_1.0.0.v20170910-2246.jar"/>
        <pathelement location="lib/org.junit.platform.runner_1.0.0.v20170910-2246.jar"/>
        <pathelement location="lib/org.junit.platform.suite.api_1.0.0.v20170910-2246.jar"/>
        <pathelement location="lib/org.junit.vintage.engine_4.12.0.v20170910-2246.jar"/>
        <pathelement location="lib/org.opentest4j_1.0.0.v20170910-2246.jar"/>
        <pathelement location="lib/piccolo2d-core-3.1-SNAPSHOT.jar"/>
        <pathelement location="lib/piccolo2d-extras-3.1-SNAPSHOT.jar"/>
        <pathelement location="lib/piccolo2d-swt-3.1-SNAPSHOT.jar"/>
    </path>
    <target name="init">
        <mkdir dir="bin"/>
        <copy includeemptydirs="false" todir="bin">
            <fileset dir="src">
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
    </target>
    <target name="clean">
        <delete dir="bin"/>
    </target>
    <target depends="clean" name="cleanall"/>
    <target depends="build-subprojects,build-project" name="build"/>
    <target name="build-subprojects"/>
    <target depends="init" name="build-project">
        <echo message="${ant.project.name}: ${ant.file}"/>
        <javac debug="true" debuglevel="${debuglevel}" destdir="bin" includeantruntime="false" source="${source}" target="${target}">
            <src path="src"/>
            <classpath refid="upmc-pstl.classpath"/>
        </javac>
    </target>
    <target description="Build all projects which reference this project. Useful to propagate changes." name="build-refprojects"/>
    <target description="copy Eclipse compiler jars to ant lib directory" name="init-eclipse-compiler">
        <copy todir="${ant.library.dir}">
            <fileset dir="${ECLIPSE_HOME}/plugins" includes="org.eclipse.jdt.core_*.jar"/>
        </copy>
        <unzip dest="${ant.library.dir}">
            <patternset includes="jdtCompilerAdapter.jar"/>
            <fileset dir="${ECLIPSE_HOME}/plugins" includes="org.eclipse.jdt.core_*.jar"/>
        </unzip>
    </target>
    <target description="compile project with Eclipse compiler" name="build-eclipse-compiler">
        <property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter"/>
        <antcall target="build"/>
    </target>
    <target name="EdgeTest (1)">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="com.puck.nodes.piccolo2d.test.EdgeTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="upmc-pstl.classpath"/>
        </junit>
    </target>
    <target name="GenrationToDisplayMain">
        <java classname="com.puck.utilities.GenrationToDisplayMain" failonerror="true" fork="yes">
            <classpath refid="upmc-pstl.classpath"/>
        </java>
    </target>
    <target name="InterfaceAffichageGrapheDeDependance">
        <java classname="com.puck.display.piccolo2d.NewDisplayDG" failonerror="true" fork="yes">
            <classpath refid="upmc-pstl.classpath"/>
        </java>
    </target>
    <target name="NodeTest (1)">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="com.puck.nodes.piccolo2d.test.NodeTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="upmc-pstl.classpath"/>
        </junit>
    </target>
    <target name="New_configuration">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="com.puck.arrows.test.ParrowISATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="upmc-pstl.classpath"/>
        </junit>
    </target>
    <target name="upmc-pstl">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="com.puck.arrows.test.ParrowISATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="upmc-pstl.classpath"/>
        </junit>
    </target>
    <target name="NodeContentTest (1)">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="com.puck.nodes.piccolo2d.test.NodeContentTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="upmc-pstl.classpath"/>
        </junit>
    </target>
    <target name="ReaderTest (1)">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="com.puck.reader.xml.ReaderTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="upmc-pstl.classpath"/>
        </junit>
    </target>
    <target name="InterfaceAdmin">
        <java classname="com.puck.utilities.javafx.GenrationToDisplayMain" failonerror="true" fork="yes">
            <classpath refid="upmc-pstl.classpath"/>
        </java>
    </target>
    <target name="PiccoloCustomNodeTest (1)">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="com.puck.nodes.piccolo2d.test.PiccoloCustomNodeTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="upmc-pstl.classpath"/>
        </junit>
    </target>
    <target name="com.puck.nodes.piccolo2d">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <jvmarg line="-ea"/>
            <classpath refid="upmc-pstl.classpath"/>
        </junit>
    </target>
    <target name="com.puck.reader.xml">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <jvmarg line="-ea"/>
            <classpath refid="upmc-pstl.classpath"/>
        </junit>
    </target>
    <target name="com.puck.nodes.piccolo2d.test">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <jvmarg line="-ea"/>
            <classpath refid="upmc-pstl.classpath"/>
        </junit>
    </target>
    <target name="junitreport">
        <junitreport todir="${junit.output.dir}">
            <fileset dir="${junit.output.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${junit.output.dir}"/>
        </junitreport>
    </target>
</project>
